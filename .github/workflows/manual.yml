name: Manual
on:
  workflow_dispatch:
    inputs:
      org:
        required: true
        description: org name. Default origin.
        default: 'origin'
      start:
        required: false
        description: SHA commit start of range commits to deploy.
      end:
        required: false
        description: SHA commit end of range commits to deploy.

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.GITHUB_REF }}
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '13.x'

#       - name: Cache node modules
#         id: cache-node-modules
#         uses: actions/cache@v2
#         env:
#           cache-name: cache-node-modules
#         with:
#           path: '**/node_modules'
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-build-${{ env.cache-name }}-
#             ${{ runner.os }}-build-
#             ${{ runner.os }}-

#       - name: Install Salesforce CLI
#         if: steps.cache-node-modules.outputs.cache-hit != 'true'
#         run: |
#           npm install sfdx-cli
#           node_modules/sfdx-cli/bin/run --version
#           node_modules/sfdx-cli/bin/run plugins --core

      - name: Convert org name to secret variables
        env:
          ORG_NAME: ${{ github.event.inputs.org }}
        run: |
          USERNAME="${ORG_NAME^^}_USERNAME"
          CONSUMER_KEY="${ORG_NAME^^}_CONSUMER_KEY"
          echo ::set-env name=USERNAME::$USERNAME
          echo ::set-env name=CONSUMER_KEY::$CONSUMER_KEY

      - name: Credentials
        id: creds
        env:
          ORG_NAME: ${{ github.event.inputs.org }}
        run: | 
          echo "${USERNAME}"
          echo "${CONSUMER_KEY}"
          USERNAME_LOCAL="${ORG_NAME^^}_USERNAME"
          CONSUMER_KEY_LOCAL="${ORG_NAME^^}_CONSUMER_KEY"
          echo ::set-env name=USERNAME_LOCAL_ENV::$USERNAME_LOCAL
          echo ::set-env name=CONSUMER_KEY_LOCAL_ENV::$CONSUMER_KEY_LOCAL
          echo "${USERNAME_LOCAL_ENV}"
          echo "${CONSUMER_KEY_LOCAL_ENV}"
          echo ::set-output name=username::${{ secrets[env.USERNAME_LOCAL_ENV] }}
          echo ::set-output name=consumer-key::${{ secrets[env.CONSUMER_KEY_LOCAL_ENV] }}

      - name: Authenticate Org
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.UTILS_JWT_SECRET_KEY }}
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SF_UTILS_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ steps.creds.outputs.username }} --setdefaultdevhubusername -a currentorg

#       - name: Prepare libs
#         env:
#           MODULES_CACHED: ${{ steps.cache-node-modules.outputs.cache-hit }}
#         run: |
#           if [ "$MODULES_CACHED" == "true" ]; then
#             npm run --prefix ./libs build-all-quick-parallel
#           else
#             npm run postinstall
#             npm run --prefix ./libs build-all-long-parallel
#           fi

#       - name: Project Metadata Prepare
#         uses: ./.github/actions/prepare-project-metadata
#         with:
#           prepare-app: 'true'
#           prepare-default-connector-settings: 'true'
#           app-certificate: ${{ secrets.SUMO_PACKAGE_CONNECTED_APP_CERTIFICATE }}
#           admin-token: ${{ secrets.JAVA_ADMIN_TOKEN }}
#           crypto-key: ${{ secrets.JAVA_CRYPTO_KEY }}
#           java-endpoint: ${{ secrets.JAVA_STAGING_ENDPOINT }}
#           consumer-key: ${{ steps.creds.outputs.consumer-key }}

#       - name: Get commits range
#         id: commit-range-sha
#         if: github.event.inputs.start != ''
#         env:
#           START_SHA: ${{ github.event.inputs.start }}
#           END_SHA: ${{ github.event.inputs.end }}
#           GITHUB_SHA: ${{ env.GITHUB_SHA }}
#         run: |
#           if [ "$START_SHA" != "" ]; then
#             echo ::set-output name=start::$START_SHA
#             if [ "$END_SHA" != "" ]; then
#               echo ::set-output name=end::$END_SHA
#             else
#               echo ::set-output name=end::$GITHUB_SHA
#             fi
#           fi

#       - name: Get changed files
#         id: file_changes
#         if: github.event.inputs.start != ''
#         uses: trilom/file-changes-action@v1.2.4
#         with:
#           pushBefore: ${{ steps.commit-range-sha.outputs.start }}
#           pushAfter: ${{ steps.commit-range-sha.outputs.end }}

#       - name: Convert git changes to SFDX deploy path
#         id: parse-git-changes
#         if: github.event.inputs.start != ''
#         uses: ./.github/actions/convert-git-changes-to-sfdx-deploy-path
#         with:
#           files: ${{ steps.file_changes.outputs.files }}
#           files-added: ${{ steps.file_changes.outputs.files_added }}
#           files-modified: ${{ steps.file_changes.outputs.files_modified }}
#           files-removed: ${{ steps.file_changes.outputs.files_removed }}

#       - name: Add Connected App to Source
#         run: |
#           mkdir force-app/main/default/connectedApps
#           cp config/connected-app/SUMOConnectedApp.connectedApp-meta.xml force-app/main/default/connectedApps

#       - name: Deploy source to org
#         env:
#           PARTIAL_DEPLOY_PATH: ${{ steps.parse-git-changes.outputs.paths }}
#         run: |
#           cp config/connected-app/DefaultConnectionSettings.Settings.md-meta.xml force-app/main/default/customMetadata
#           if [ "$PARTIAL_DEPLOY_PATH" != "" ]; then
#             deployPath=$PARTIAL_DEPLOY_PATH
#           else
#             deployPath="force-app/main/default"
#           fi
#           echo $deployPath
#           node_modules/sfdx-cli/bin/run force:source:deploy -p $deployPath -u qaorg
