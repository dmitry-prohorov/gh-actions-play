name: PackageValidation
on:
  pull_request:
    branches: [master]
    types: [synchronize, opened, reopened, ready_for_review]

jobs:
  validate-release:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2-beta
        with:
          node-version: "13.x"

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Salesforce CLI
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          npm install sfdx-cli
          node_modules/sfdx-cli/bin/run --version
          node_modules/sfdx-cli/bin/run plugins --core

      - name: Authenticate DevHub
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SUMO_PROD_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.SUMO_PROD_USERNAME }} --setdefaultdevhubusername -a devhub
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.SUMO_PROD_JWT_SECRET_KEY }}

      - name: Create scratch org
        run: node_modules/sfdx-cli/bin/run force:org:create -v devhub -s -f config/project-scratch-def.json -a test-org -d 1

      - name: Deploy source
        run: node_modules/sfdx-cli/bin/run force:source:push -u test-org

      - name: Run Apex test
        run: |
          mkdir test-results
          export SFDX_IMPROVED_CODE_COVERAGE=true
          #echo ::set-output name=result::$(SFDX_IMPROVED_CODE_COVERAGE=true node_modules/sfdx-cli/bin/run force:apex:test:run -r json -c -u test-org -w 60 --json)
          node_modules/sfdx-cli/bin/run force:apex:test:run -r json -c -u test-org -w 60 --json -d test-results

      - name: Process tests results
        if: always()
        uses: actions/github-script@v3
        with:
          script: |
            function getIssueNumber(body) {
                const matches = body.match(/ISSUE TO RESOLVE: #([\d]+)/g)
                if (!matches) return null
                return matches[0].split('#')[1]
            }
            const issue_number = getIssueNumber(context.payload.pull_request.body)
            const fs = require('fs')
            const path = require('path')
            const testRunId = await fs.promises.readFile(path.resolve('test-results', 'test-run-id.txt'), 'utf8')
            const result = JSON.parse(await fs.promises.readFile(path.resolve('test-results', `test-result-${testRunId}.json`), 'utf8'))
            /*const response = JSON.parse(process.env.TEST_RESULTS)
            const result = response.result*/
            console.log('------------SUMMARY--------------')
            console.log(result.summary)

            const code = '```';
            const summary = `### Summary\n${code}javascript\n${JSON.stringify(result.summary, null, '  ')}\n${code}`
            if ((result.summary.failing > 0) || (parseInt(result.summary.testRunCoverage) < 75)) {
              const fails = result.tests.filter(test => test.Outcome === 'Fail')
              console.log('------------FAILS--------------')
              fails.forEach(test => {
                console.group(`Method: ${test.FullName}`);
                console.group(`Trace:\n${test.StackTrace}`);
                console.groupEnd();
                console.log(`Message: ${test.Message}`);
                console.groupEnd();
              })
              const issueFails = fails.map(test => {
                return `- [ ] ${test.FullName}`
              }).join('\n')
              const logUrl = `${context.payload.repository.html_url}/actions/runs/${process.env.GITHUB_RUN_ID}`
              const request = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Auto-generated message by ${context.workflow}(${context.eventName}).\n\n${summary}\n\n### Fails:\n${issueFails}\n\n### [Details](${logUrl})`,
              }

              if (issue_number) {
                await github.issues.createComment({ ...request, issue_number })
              } else {
                const issue = await github.issues.create({
                  ...request,
                  title: `['Packaging']: Fix coverage in branch "${context.payload.pull_request.head.ref}".`,
                  assignees: [context.actor],
                  labels: ['automation', 'development', 'bug']
                })

                await github.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  body: `${context.payload.pull_request.body}\n\r\n\r### ISSUE TO RESOLVE: #${issue.data.number}`
                })
              }

            } else if (issue_number) {
              const request = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number
              }

              // update comment with success response
              await github.issues.createComment({
                ...request,
                body: summary
              })
              // close issue
              await github.issues.update({
                ...request,
                state: 'closed'
              })
            }

      - name: Delete scratch org
        if: always()
        run: node_modules/sfdx-cli/bin/run force:org:delete -u test-org --noprompt
