name: PackagingCI

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: Version number to specify for creating package

jobs:
  create-package:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare job env
        id: prepare
        uses: actions/github-script@v2
        with:
          script: |
            core.setOutput('package-name', `"Dpro Play Package (v${context.payload.inputs.version})"`)
      - uses: actions/setup-node@v2-beta
        with:
          node-version: "13.x"
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Salesforce CLI
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          npm install sfdx-cli
          node_modules/sfdx-cli/bin/run --version
          node_modules/sfdx-cli/bin/run plugins --core
      - name: Authenticate packaging org
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SF_UTILS_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.AUTOMATION_ORG_USERNAME}} --setdefaultdevhubusername -a automation
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.UTILS_JWT_SECRET_KEY }}
      - name: Create package
        id: package
        run: |
          package=`node_modules/sfdx-cli/bin/run force:package1:version:create -m -w 60 -n ${{ steps.prepare.outputs.package-name }} -v ${{ github.event.inputs.version }} -u automation -i ${{ secrets.PACKAGE_ID }} --json`
          echo ::set-output name=result::$package
      - name: Output
        uses: actions/github-script@v2
        env:
          PACKAGE_RESULTS: ${{ steps.package.outputs.result }}
        with:
          script: |
            console.log(process.env.PACKAGE_RESULTS)
