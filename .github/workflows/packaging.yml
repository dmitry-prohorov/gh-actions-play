name: PackagingCI

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: Version number to specify for creating package
      name:
        required: true
        description: Package name
        default: Dpro Play Package
      skip_deploy:
        require: false
        description: Allow to skip package-deploy step
        default: "false"
      skip_delete:
        require: false
        description: Allow to skip package-delete step
        default: "false"
      skip_packaging:
        require: false
        description: Allow to skip create-package step
        default: "false"

jobs:
  package-prepare:
    runs-on: ubuntu-latest
    outputs:
      base: ${{ steps.setup.outputs.base }}
      api-version: ${{ steps.setup.outputs.version}}
    steps:
      - uses: actions/checkout@v2
      - name: Setup job environment
        id: setup
        uses: actions/github-script@v3
        with:
          script: |
            const masterBranch = await github.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'master'
            })
            core.setOutput('base', masterBranch.data.commit.sha)

            const project = JSON.parse(require(`${process.env.GITHUB_WORKSPACE}/sfdx-project.json`))
            core.setOutput('version', project.sourceApiVersion)

  package-deploy:
    needs: package-prepare
    runs-on: ubuntu-latest
    steps:
      - name: Context
        env:
          NEEDS_CONTEXT: ${{ toJson(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - uses: actions/checkout@v2
        if: github.event.inputs.skip_deploy == 'false'
      - uses: actions/setup-node@v2-beta
        if: github.event.inputs.skip_deploy == 'false'
        with:
          node-version: "13.x"
      - name: Cache node modules
        if: github.event.inputs.skip_deploy == 'false'
        id: cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Authenticate Packaging Org
        if: github.event.inputs.skip_deploy == 'false'
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SF_UTILS_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.AUTOMATION_ORG_USERNAME }} --setdefaultdevhubusername -a packaging
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.UTILS_JWT_SECRET_KEY }}
      - name: Deploy source to Packaging org
        if: github.event.inputs.skip_deploy == 'false'
        run: |
          node_modules/sfdx-cli/bin/run force:source:convert -d src -r force-app/main/default -n '${{ github.event.inputs.name }}'
          node_modules/sfdx-cli/bin/run force:mdapi:deploy -d src -w -1 -l RunLocalTests -u packaging

      - name: Add postinstall script
        if: github.event.inputs.skip_deploy == 'false'
        run: |
          mkdir postinstall
          mkdir postinstall/classes
          cp -R src/classes/PostInstall.cls* postinstall/classes
          cat > postinstall/package.xml << EOF
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
                <fullName>${{ github.event.inputs.name }}</fullName>
                <postInstallClass>PostInstall</postInstallClass>
                <version>${{ needs.package-prepare.outputs.api-version }}</version>
          </Package>
          EOF
          node_modules/sfdx-cli/bin/run force:mdapi:deploy -d postinstall -w -1 -u packaging

  create-package:
    if: github.event.inputs.skip_packaging == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare job env
        id: prepare
        uses: actions/github-script@v2
        with:
          script: |
            core.setOutput('package-name', `"${context.payload.inputs.name} (v${context.payload.inputs.version})"`)
      - uses: actions/setup-node@v2-beta
        with:
          node-version: "13.x"
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Salesforce CLI
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          npm install sfdx-cli
          node_modules/sfdx-cli/bin/run --version
          node_modules/sfdx-cli/bin/run plugins --core
      - name: Authenticate packaging org
        run: |
          echo "${SALESFORCE_JWT_SECRET_KEY}" > server.key
          node_modules/sfdx-cli/bin/run force:auth:jwt:grant --clientid ${{ secrets.SF_UTILS_CONSUMER_KEY }} --jwtkeyfile server.key --username ${{ secrets.AUTOMATION_ORG_USERNAME}} --setdefaultdevhubusername -a automation
        env:
          SALESFORCE_JWT_SECRET_KEY: ${{ secrets.UTILS_JWT_SECRET_KEY }}
      - name: Create package
        id: package
        run: |
          # echo ::set-output name=result::$(node_modules/sfdx-cli/bin/run force:package1:version:create -m -w 60 -n ${{ steps.prepare.outputs.package-name }} -v ${{ github.event.inputs.version }} -u automation -i ${{ secrets.PACKAGE_ID }} --json)
      - name: Extract package results
        id: packaging
        uses: actions/github-script@v2
        # env:
        #   PACKAGE_RESULTS: ${{ steps.package.outputs.result }}
        with:
          script: |
            /* console.log(process.env.PACKAGE_RESULTS)
            const packageResult = JSON.parse(process.env.PACKAGE_RESULTS)
            if (packageResult.status !== 0) {
              throw new Error(`${packageResult.name}: ${packageResult.message}`)
            }

            core.setOutput('package-version-id', packageResult.result.MetadataPackageVersionId)*/
            core.setOutput('package-version-id', '123')
      - name: Create tag
        uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.DPRO_TOKEN }}
          script: |
            const tag = await github.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: `v${context.payload.inputs.version}`,
              message: `v${context.payload.inputs.version}`,
              object: context.sha,
              type: 'commit',
            });
            console.log(tag)
            const ref = await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${context.payload.inputs.version}`,
              sha: tag.data.sha
            })
            console.log(ref)
      - name: Create release
        uses: actions/github-script@v2
        env:
          PACKAGE_ID: ${{ steps.packaging.outputs.package-version-id }}
        with:
          script: |
            await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${context.payload.inputs.version}`,
              draft: true,
              name: `${context.payload.inputs.name} (${context.payload.inputs.version})`,
              body: `### [Installation link](https://login.salesforce.com/packaging/installPackage.apexp?p0=${process.env.PACKAGE_ID})

              ### Resolved issues:
              `,
            })
